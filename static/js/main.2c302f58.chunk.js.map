{"version":3,"sources":["components/counter/CounterUnit.module.css","App.module.css","components/counter/CounterDisplay.module.css","components/image/Image.module.css","bg.png","components/header/Header.module.css","shared/Color.context.js","components/counter/CounterUnit.jsx","shared/Color.service.js","shared/Time.service.js","components/counter/CounterDisplay.jsx","components/counter/Counter.jsx","components/image/Image.jsx","App.jsx","serviceWorker.js","index.js"],"names":["module","exports","container","number","unit","app","counter","flex","image","__webpack_require__","p","header","ColorContext","React","createContext","color","setColor","CounterUnit","_ref","hexcolor","useContext","style","background","parseInt","substr","react_default","a","createElement","className","styles","Units","getDurationFromNow","endDate","startDate","startMoment","moment","endMoment","duration","diff","seconds","minutes","hours","days","Math","floor","asDays","getDuration","CounterDisplay","counter_CounterUnit","Counter","_useState","useState","_useState2","Object","slicedToArray","setDuration","useEffect","interval","setInterval","clearInterval","counter_CounterDisplay","Image","src","alt","App","Provider","value","image_Image","counter_Counter","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2c302f58.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"CounterUnit_container__mNH-i\",\"number\":\"CounterUnit_number__1OfRD\",\"unit\":\"CounterUnit_unit__2pVJ7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app__35_bp\",\"counter\":\"App_counter__3n35Y\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"flex\":\"CounterDisplay_flex__4RwM9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"image\":\"Image_image__1T-n9\"};","module.exports = __webpack_public_path__ + \"static/media/bg.8d127a83.png\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__3AUrn\"};","import React from 'react';\r\n\r\nexport const ColorContext = React.createContext({\r\n  color: '#000',\r\n  setColor: () => {}\r\n});\r\n","import React, { useContext } from 'react';\r\nimport styles from './CounterUnit.module.css';\r\nimport { getContrast } from '../../shared/Color.service';\r\nimport { ColorContext } from '../../shared/Color.context';\r\n\r\nconst CounterUnit = ({ unit, number }) => {\r\n  const { color } = useContext(ColorContext);\r\n  const style = {\r\n    background: color,\r\n    color: getContrast(color)\r\n  };\r\n  return (\r\n    <div className={styles.container} style={style}>\r\n      <div className={styles.number}>{number}</div>\r\n      <div className={styles.unit}>{unit}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CounterUnit;\r\n","export function getContrast(hexcolor) {\r\n  const r = parseInt(hexcolor.substr(1, 2), 16);\r\n  const g = parseInt(hexcolor.substr(3, 2), 16);\r\n  const b = parseInt(hexcolor.substr(5, 2), 16);\r\n  const yiq = (r * 299 + g * 587 + b * 114) / 1000;\r\n  return yiq >= 128 ? 'black' : 'white';\r\n}\r\n","import moment from 'moment';\r\n\r\nexport const Units = {\r\n  Days: 'days',\r\n  Hours: 'hours',\r\n  Minutes: 'minutes',\r\n  Seconds: 'seconds'\r\n};\r\n\r\nexport function getNow() {\r\n  return moment();\r\n}\r\n\r\nexport function getDuration(startDate, endDate) {\r\n  const startMoment = moment(startDate);\r\n  const endMoment = moment(endDate);\r\n  let duration = moment.duration(endMoment.diff(startMoment));\r\n  return {\r\n    seconds: duration.seconds(),\r\n    minutes: duration.minutes(),\r\n    hours: duration.hours(),\r\n    days: Math.floor(duration.asDays())\r\n  };\r\n}\r\n\r\nexport function getDurationFromNow(endDate) {\r\n  return getDuration(getNow(), endDate);\r\n}\r\n","import React from 'react';\r\nimport styles from './CounterDisplay.module.css';\r\nimport CounterUnit from './CounterUnit';\r\nimport { Units } from '../../shared/Time.service';\r\n\r\nconst CounterDisplay = ({ days, hours, minutes, seconds }) => (\r\n  <div className={styles.flex}>\r\n    <CounterUnit unit={Units.Days} number={days} />\r\n    <CounterUnit unit={Units.Hours} number={hours} />\r\n    <CounterUnit unit={Units.Minutes} number={minutes} />\r\n    <CounterUnit unit={Units.Seconds} number={seconds} />\r\n  </div>\r\n);\r\n\r\nexport default CounterDisplay;\r\n","import React, { useState, useEffect } from 'react';\r\nimport CounterDisplay from './CounterDisplay';\r\nimport { getDurationFromNow } from './../../shared/Time.service';\r\n\r\nconst Counter = ({ endDate }) => {\r\n  const [duration, setDuration] = useState(getDurationFromNow(endDate));\r\n\r\n  useEffect(() => {\r\n    const interval = setInterval(() => {\r\n      setDuration(getDurationFromNow(endDate));\r\n    }, 1000);\r\n\r\n    return () => {\r\n      clearInterval(interval);\r\n    };\r\n  }, []);\r\n\r\n  return <CounterDisplay {...duration} />;\r\n};\r\n\r\nexport default Counter;\r\n","import React from 'react';\r\nimport styles from './Image.module.css';\r\nimport image from './../../bg.png';\r\n\r\nconst Image = () => {\r\n  return <img src={image} className={styles.image} alt=\"logo\" />;\r\n};\r\n\r\nexport default Image;\r\n","import React, { useState } from 'react';\r\nimport styles from './App.module.css';\r\n\r\nimport Counter from './components/counter/Counter';\r\n// import RandomImage from './components/randomImage/RandomImage';\r\nimport Image from './components/image/Image';\r\nimport Header from './components/header/Header';\r\n\r\nimport { ColorContext } from './shared/Color.context';\r\n\r\nconst App = () => {\r\n  const [color, setColor] = useState('#000');\r\n  return (\r\n    <div className={styles.app}>\r\n      <ColorContext.Provider value={{ color, setColor }}>\r\n        <Image />\r\n        <div className={styles.counter}>\r\n          {/* <Header>Templafy Ignite</Header> */}\r\n          <Counter endDate={'2019-08-06 09:00'} />\r\n        </div>\r\n      </ColorContext.Provider>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}